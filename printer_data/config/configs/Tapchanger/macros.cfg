[gcode_macro TOOLCHANGE_DEMO]
description: [SAMPLES=<int>]
  Run random tool changes.
  SAMPLES= Number of changes to run, default is 20.
gcode:
    {% for n in range(20) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro PRINT_STATUS]
gcode: 
  RESPOND TYPE='echo' MSG="Status for M190 {params.OBJ} is { printer[params.OBJ] }"
#python:
#  gcode.RESPOND(TYPE='echo', MSG=f"Status for M190 {params.OBJ} is { printer[params.OBJ] }")

[gcode_macro _PARK_ON_COOLING_PAD]
gcode:
  G90 ; Absolute positioning
  G0 X118 Y-4.5 Z5 F5000
  G0 Z0 F600

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle on nozzle cleaning pad.
gcode:
  G90
  RESPOND TYPE=echo MSG="Cleaning nozzle"
  {% set heater =  printer.toolhead.extruder %}
  M104 S{params.TEMP}
  
  G0 X160 Y100 F5000
  G0 X160 Y-4.5 Z5 F5000
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={params.TEMP}
  M104 S0 # Set temp to 0
  G0 Z0.5
  G0 X120 F5000
  G0 X155 F5000
  G0 X124 F5000
  G0 X121 F5000
  G0 X118 Z1 F5000
  G0 Z0 F600
  TEMPERATURE_WAIT SENSOR={heater} MAXIMUM=120
  G0 Z20
  G0 Y20

[gcode_macro _WIPE_NOZZLE]
description: Wipe the nozzle on the pad
gcode:
  G90     
  G0 X288 Y12.10 Z5 F5000
  G0 Z-1.5
  G0 X278 F5000
  G0 X238 F5000
  G0 X278 F5000
  G0 X238 F5000
  G0 X288 Z1 F5000
  G0 Z-0.3 F60
  G0 Z5 F600

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  G0 Z0 F600
  M84

[gcode_macro UNSAFE_RAISE_BED]
description: Raise the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z100 F600
  M84

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

[gcode_macro M109]
rename_existing: M109.9999
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 1.0
gcode:
    {% set s = params.S|float %}
    {% set deadband = default_deadband|float %}
    {% if params.D is defined %}
        {% set deadband = params.D|float %}
    {% endif %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}

    SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
    {% if s > 0 %}
        TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
    {% endif %}


[gcode_macro PRIME_LINES]
description: Prime all active tools before printing.
  INITIAL_TOOL= Tool number, optional.
variable_tools_per_x:          6      # Number of tools primed in a single row
variable_lines_per_tool:       4      # Number of prime lines per tool
variable_line_step_y:          2      # Distance between lines in Y axis
variable_spacing:              7      # Distance between each tools prime lines
variable_ratio:                4      # Distance to move per 1mm of extrusion
variable_x_neg_offset:         5      # Distance from Edge of the bed on the -X axis
variable_x_pos_offset:         5      # Distance from Edge of the bed on the +X axis
variable_y_offset:             5      # Distance from Edge of the bed on the -Y axis
variable_pre_prime:            8      # Amount of extrude to do before starting prime line
variable_wipe_length:          6      # Wipe length after prime
variable_initial_tool_retract: 0.2    # Retraction distance for the initial tool (if defined) after prime
variable_docked_tool_retract:  0.5    # Retraction distance for docked tools after prime
variable_z_prime_pos:          0.3    # Distance from bed on Z axis while priming
variable_z_move_pos:           1      # Distance from bed on Z axis while moving
variable_move_speed:           10000  # Travel move speed
variable_prime_speed:          1000   # Prime move speed
variable_wipe_speed:           3000   # Wipe move speed
variable_temp_drop:            30     # Amount of temperature drop applied to nozzles that are being docked

gcode:
  SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set line_length = (max_x-(x_neg_offset+x_pos_offset)-(spacing*(tools_per_x-1)))/tools_per_x %}
  {% set print_tools = [] %}

  # Figure out the required tools by which tools are preheating
  {% for tn in printer.toolchanger.tool_numbers %}
    {% set extruder_id = "extruder" + tn|string if tn > 0 else "extruder" %}

    {% if printer[extruder_id].target >= printer.configfile.settings[extruder_id].min_extrude_temp %}
      {% set gengar = print_tools.append(tn) %}
    {% endif %}
  {% endfor %}

  # Make sure the initial print tool is the last to prime
  {% if params.INITIAL_TOOL is defined %}
    {% set initial_tool = params.INITIAL_TOOL|int %}

    {% if print_tools|length > 1 %}
      {% set snorlax   = print_tools.pop(print_tools.index(initial_tool)) %}
      {% set lickitung = print_tools.append(initial_tool) %}
    {% endif %}
  
    {% if printer.toolchanger.tool_number != initial_tool and printer.toolchanger.tool_number != print_tools[0] and printer.toolchanger.tool_number in print_tools %}
      {% set mimikyu = print_tools.pop(print_tools.index(printer.toolchanger.tool_number)) %}
      {% set bulbasaur = print_tools.insert(0, printer.toolchanger.tool_number) %}
    {% endif %}

    {% else %}
      {% set initial_tool = None %}
  {% endif %}
  
  {% for tn in print_tools %}
    # Change tool
    T{tn}

    {% set extruder_id = "extruder" + tn|string if tn > 0 else "extruder" %}
    {% set t_idx = print_tools.index(tn) %}
    {% set y_idx = (t_idx/tools_per_x)|int %}
    {% set x_tool_list = print_tools[y_idx*tools_per_x:] %}
    {% set x_idx = x_tool_list.index(tn) %}
    {% set prime_start_x = x_neg_offset + (x_idx*line_length) + (x_idx*spacing) %}
    {% set prime_start_y = y_offset + (line_step_y*(lines_per_tool-1)) + (y_idx*spacing) %}

    # Move to position
    G0 X{prime_start_x} Y{prime_start_y} Z{z_move_pos} F{move_speed}
    G0 Z{z_prime_pos} F{move_speed}

    # Wait for temp
    M109 S{printer[extruder_id].target} T{tn}

    # Prime Tool
    M117 Priming T{tn}
    M83
    G92 E0
    G91
    G1 E{pre_prime} F{prime_speed}
    
    {% for i in range(lines_per_tool) %}
      {% set last_line = i == lines_per_tool-1 %}
      {% set segment = ((line_length/ratio)-2)|int if last_line else ((line_length/ratio)+1)|int %}
      
      {% if i % 2 == 0 %}
        {% for _i in range(1, segment) %}
          G1 X{ratio} E1 F{prime_speed}
        {% endfor %}
      {% else %}
        {% for _i in range(1, segment) %}
          G1 X-{ratio} E1 F{prime_speed}
        {% endfor %}
      {% endif %}
  
      {% if not last_line %}
        G1 Y-{line_step_y} E{(line_step_y/ratio)*1} F{move_speed}
      {% endif %}
    {% endfor %}

    G1 E-{initial_tool_retract if tn == initial_tool else docked_tool_retract} F{wipe_speed}
    G0 X{-0.5 if lines_per_tool % 2 == 0 else 0.5} F{wipe_speed}
    G0 X{wipe_length-0.5 if lines_per_tool % 2 == 0 else -(wipe_length-0.5)} F{wipe_speed}
    G0 Z{z_move_pos}

    # Reduce temp for tools that are not required yet
    {% if params.INITIAL_TOOL is defined %}
      {% if initial_tool in print_tools %}
        {% if tn != initial_tool %}
          M104 S{printer[extruder_id].target-temp_drop} T{tn}
        {% endif %}
      {% endif %}
    {% endif %}

  G90

  {% endfor %}

  RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE
  
  # Use the correct offset for the current tool
  _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
  